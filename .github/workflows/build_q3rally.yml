name: Build (Linux/Windows 32&64-bit, macOS Intel&ARM) from engine/

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        include:
          # --- Linux (Ubuntu) ---
          - name: linux-x64
            os: ubuntu-latest
            family: linux
            arch: x86_64
            cflags: ""
            pkgs: "build-essential libsdl2-dev libcurl4-openssl-dev libopenal-dev zlib1g-dev make"
          - name: linux-x86
            os: ubuntu-latest
            family: linux
            arch: i686
            cflags: "-m32"
            pkgs: "build-essential gcc-multilib g++-multilib libsdl2-dev libcurl4-openssl-dev libopenal-dev zlib1g-dev make"
          # --- Windows (MSYS2/MinGW) ---
          - name: windows-x64
            os: windows-latest
            family: windows
            msys: MINGW64
            msys_pkgs: "mingw-w64-x86_64-toolchain make"
          - name: windows-x86
            os: windows-latest
            family: windows
            msys: MINGW32
            msys_pkgs: "mingw-w64-i686-toolchain make"
          # --- macOS ---
          - name: macos-intel-x64
            os: macos-13
            family: macos
            arch: x86_64
            cflags: ""
          - name: macos-apple-arm64
            os: macos-latest
            family: macos
            arch: arm64
            cflags: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Linux ----------
      - name: Install deps (Linux)
        if: ${{ matrix.family == 'linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.pkgs }}

      - name: Build (Linux)
        if: ${{ matrix.family == 'linux' }}
        working-directory: engine
        env:
          CFLAGS: ${{ matrix.cflags }}
          LDFLAGS: ${{ matrix.cflags }}
        run: |
          make clean || true
          make -j$(nproc) CFLAGS="${CFLAGS}" LDFLAGS="${LDFLAGS}"

      # ---------- Windows via MSYS2/MinGW ----------
      - name: Setup MSYS2 (Windows)
        if: ${{ matrix.family == 'windows' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msys }}
          update: true
          install: ${{ matrix.msys_pkgs }}

      - name: Build (Windows)
        if: ${{ matrix.family == 'windows' }}
        working-directory: engine
        shell: msys2 {0}
        run: |
          make clean || true
          make -j

      # ---------- macOS ----------
      - name: Select architecture (macOS)
        if: ${{ matrix.family == 'macos' }}
        run: |
          echo "Target arch: ${{ matrix.arch }}"
          echo "CFLAGS=-arch ${{ matrix.arch }}" >> $GITHUB_ENV
          echo "LDFLAGS=-arch ${{ matrix.arch }}" >> $GITHUB_ENV

      - name: Build (macOS)
        if: ${{ matrix.family == 'macos' }}
        working-directory: engine
        env:
          CFLAGS: ${{ env.CFLAGS }}
          LDFLAGS: ${{ env.LDFLAGS }}
        run: |
          make clean || true
          make -j$(sysctl -n hw.ncpu) CFLAGS="${CFLAGS}" LDFLAGS="${LDFLAGS}"

      # ---------- Collect artifacts ----------
      - name: Archive build outputs
        run: |
          mkdir -p _dist/${{ matrix.name }}
          # Collect common output dirs inside engine/ first
          if [ -d engine/build ]; then cp -a engine/build/* _dist/${{ matrix.name }}/ || true; fi
          if [ -d engine/out ];   then cp -a engine/out/*   _dist/${{ matrix.name }}/ || true; fi
          # Also copy any produced binaries from engine/ root (heuristic: executable bit)
          find engine -maxdepth 1 -type f -perm -111 -exec cp {} _dist/${{ matrix.name }}/ \; || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: q3rally-${{ matrix.name }}
          path: _dist/${{ matrix.name }}/
